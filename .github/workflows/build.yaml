name: Build Claude Desktop MCP Manager

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Test application (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        # Test import without running GUI
        python -c "
        import sys
        import os
        # Mock tkinter for headless testing
        class MockTk:
            def __init__(self): pass
            def title(self, *args): pass
            def geometry(self, *args): pass
            def minsize(self, *args): pass
            def config(self, *args): pass
            def quit(self): pass
            def mainloop(self): pass
            def columnconfigure(self, *args): pass
            def rowconfigure(self, *args): pass
            def after(self, *args): pass
            def wait_window(self, *args): pass
        
        import tkinter
        tkinter.Tk = MockTk
        
        # Now test import
        try:
            exec(open('mcp_manager.py').read())
            print('‚úÖ Application code validated successfully')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            # Write full exception to a file to ensure it's captured
            with open('importerror.log', 'w') as f_err:
                import traceback
                traceback.print_exc(file=f_err)
            sys.exit(1)
        "
    - name: Display Import Error (Linux/macOS)
      if: runner.os != 'Windows' && failure()
      run: |
        echo "Python script execution failed. Error log:"
        cat importerror.log

    - name: Test application (Windows)
      if: runner.os == 'Windows'
      run: |
        python -c "print('‚úÖ Python installation verified')"

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name "Claude-MCP-Manager-${{ matrix.os }}-py${{ matrix.python-version }}" mcp_manager.py

    - name: List build output
      run: |
        ls -la dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.os }}-python${{ matrix.python-version }}
        path: dist/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-files
        find release-artifacts -name "*windows*" -type f -exec cp {} release-files/ \;
        find release-artifacts -name "*macos*" -type f -exec cp {} release-files/ \;
        find release-artifacts -name "*ubuntu*" -type f -exec cp {} release-files/ \;
        ls -la release-files/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Claude Desktop MCP Manager ${{ github.ref_name }}
        body: |
          ## üéâ Claude Desktop MCP Manager Release ${{ github.ref_name }}
          
          ### ‚ú® Features
          - üñ•Ô∏è Visual MCP server management interface
          - üåç Cross-platform support (Windows, macOS, Linux)
          - üîí Configuration safety with automatic backups
          - ‚öôÔ∏è Custom path configuration for Claude Desktop
          - ‚è∏Ô∏è Pause/resume servers without losing configuration
          - üîÑ Claude Desktop restart integration
          - üìä Debug console with real-time logging
          
          ### üì• Downloads
          Choose the executable for your platform and Python version:
          
          - **Windows**: `Claude-MCP-Manager-windows-latest-py*.exe`
          - **macOS**: `Claude-MCP-Manager-macos-latest-py*`
          - **Linux**: `Claude-MCP-Manager-ubuntu-latest-py*`
          
          ### üöÄ Quick Start
          1. Download the appropriate executable for your platform
          2. Run the executable directly (no installation required)
          3. The tool will auto-detect your Claude Desktop configuration
          4. Configure custom paths in Settings if needed
          
          ### üõ†Ô∏è Manual Installation
          If you prefer to run from source:
          ```bash
          git clone https://github.com/YOUR_USERNAME/claude-desktop-mcp-manager.git
          cd claude-desktop-mcp-manager
          python mcp_manager.py
          ```
          
          ### üÜò Troubleshooting
          - If the executable doesn't start, try a different Python version build
          - Check the Settings tab to configure custom Claude Desktop paths
          - View the Console tab for detailed error information
          - See the README.md for platform-specific instructions
          
          ### üôè Attribution
          Created by [Dawid](https://dawid.ai)
          
          Please maintain attribution when distributing or modifying this software.
          
          ### üìù Changelog
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes in this release.
        files: release-files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}